data.frame() %>%
select(plan_name, use3, use, plan_type) %>%
distinct(plan_name, use3, use, plan_type) %>%
group_by(plan_name, plan_type, use3) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),
options=list(pageLength=8),
colnames = c("Area Name","Plan Type","Use Type","Allowed"))
}  else if(y()=="Parcels"){
datatable(st_join(st_buffer(parcel %>% filter(APN %in% input$parcel_name),0), st_buffer(gis1,0), largest=TRUE) %>%
left_join(uses_final1, by="id") %>%
data.frame() %>%
filter(use %in% c("Allowed", "Special Use")) %>%
distinct(APN,use3, plan_name.x, plan_type.x, use) %>%
group_by(APN,use3, plan_name.x, plan_type.x) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),options=list(pageLength=8),
colnames = c("APN","Use Type","Area Name","Area Type","Allowed"))
} else if (y() == "Planning Areas"){
datatable(uses_final1 %>%
filter(id_name %in% input$area_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
distinct(plan_name, area_type, use3, use ) %>%
group_by( plan_name,area_type,use3) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),
options=list(pageLength=8), colnames = c("Area Name","Area Type","Use Type", "Allowed"),
rownames=F)
} else {
datatable(uses_final1 %>% filter(use=="test") %>% select())
}
})
x<-reactive({
input$input_type
})
output$map <- renderLeaflet({
if(x() == "Regional"){
test<-gis1 %>% left_join(
uses_final1 %>%
filter(use3 %in% input$use_name & use %in% c("Allowed","Special Use")) %>%
distinct(id) %>%
mutate(tab="tab"), by="id") %>%
filter(!is.na(tab))
leaflet(test) %>%
addPolygons(weight=1, fillOpacity=0.5, fillColor="red", color="white", popup=paste0(test$id_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
#label = ~test$id_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addTiles()
}  else if (x() == "Parcels") {
parcel %>% filter(APN %in% input$parcel_name) %>%
leaflet() %>% addPolygons(weight=1, fillOpacity=0.3, fillColor="#229F03", color="white", popup=paste0(input$parcel_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
# # Add label info when mouseover
label = input$parcel_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
}else if (x() == "Planning Areas"){
gis1 %>% filter(id_name %in% input$area_name) %>% leaflet() %>%
addPolygons(weight=1, fillOpacity=0.5, fillColor="#03F", color="white", popup=paste0(input$area_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
# # Add label info when mouseover
label = input$area_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
} else {
leaflet() %>% addTiles()
}
})
output$ui <- renderUI({
if (is.null(input$input_type)){
return(NULL)
} else {
switch(input$input_type,
"Planning Areas" = selectInput(selected=" ",inputId = "area_name",label="Select Planning Area:", multiple=T,  choices=sort(as.vector(c(unique(as.character(gis1$id_name))," ")))),
"Regional" = selectInput(selected=" ",inputId = "use_name",label="Select Zoning Use:", multiple=T,  choices=sort(as.vector(c(unique(uses_final1$use3)," ")))),
"Parcels" = selectInput(selected=" ",inputId = "parcel_name",label="Select Parcel:", multiple=T,  choices=sort(as.vector(c(unique(parcel$APN)," ")))))
}
})
}
)
detach("package:waiter", unload = TRUE)
remotes::install_github("JohnCoene/waiter")
remotes::install_github("JohnCoene/waiter")
library(waiter)
shinyApp(
ui <- dashboardPage(skin="green",
dashboardHeader(title="TRPA Zoning Dashboard",titleWidth = 500),
dashboardSidebar(
selectInput(inputId = "input_type",label="Select Analysis Type", multiple=F,  choices=c("Planning Areas","Regional", "Parcels",""), selected=""),
uiOutput("ui"),
use_waiter(),
actionButton("show", "Show loading for 3 seconds"),
box(width=12,background="black",p("Select the dropdown options above to analyze TRPA zoning data at different scales; a user can analyze zoning data by planning areas, parcels, or region-wide. All zoning areas are included except shorezones."))
),
dashboardBody(
fluidRow(valueBoxOutput("uses1", width=4),
valueBoxOutput("uses2", width=2)),
fluidRow(
box(dataTableOutput("pas_table")),
box(leafletOutput("map")))
)
),
server <- function(input, output) {
w<-reactive({
input$input_type
})
output$uses1 <- renderValueBox({
if(w() == "Planning Areas"){
valueBox(
nrow(uses_final1 %>% filter(id_name %in% input$area_name) %>%
filter(use %in% c("Allowed"))), "# Allowed Uses",
color = "purple")
} else if (w() == "Parcels") {
valueBox(parcel %>%
filter(APN %in% input$parcel_name) %>%
data.frame() %>%
select(APN), "APN",color = "green")
} else if( w()== "Regional") {
valueBox(
uses_final1 %>%
filter(use3 %in% input$use_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
distinct(use3),
"Type of Use", color = "red")
} else if (w() == "") {
valueBox("","",color = "purple")
} else if (input$use_name=="") {
valueBox("","",color = "red")
}else if (input$use_name ==" ") {
valueBox("","",color = "red")
}  else {valueBox("","",color = "red")}
})
z<-reactive({
input$input_type
})
output$uses2 <- renderValueBox({
if(z() == "Planning Areas"){
valueBox(
nrow(uses_final1 %>% filter(id_name %in% input$area_name) %>%
filter(use %in% c("Special Use"))), "# Special Uses",
color = "purple")
}else if (z() == "Parcels") {
valueBox(nrow(st_join(st_buffer(parcel %>% filter(APN %in%input$parcel_name),0), st_buffer(gis1,0), largest=TRUE) %>%
left_join(uses_final1, by="id") %>%
data.frame() %>%
filter(use %in% c("Allowed", "Special Use")) %>%
distinct(APN,use3, plan_name.x, plan_type.x, use) %>%
group_by(APN,use3, plan_name.x, plan_type.x) %>%
summarise(`Use Type`=paste(use, collapse = " & "))),"Number of Uses Allowed",color = "green")
}else if (z() == "Regional") {
valueBox(
uses_final1 %>%
filter(use3 %in% input$use_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
summarise(number=n_distinct(plan_name)) %>% select(number),
"# of Planning Areas",
color = "red")
} else if (z() == "") {
valueBox("","",color = "purple")
} else if (input$use_name=="") {
valueBox("","",color = "red")
}else if (input$use_name==" ") {
valueBox("test","test",color = "red")
}else if (input$parcel_name==" ") {
valueBox("","",color = "green")
} else{valueBox("","",color = "red")
}
})
y<-reactive({
input$input_type
})
output$pas_table <- renderDataTable({
if(y() == "Regional"){
datatable(
uses_final1 %>%
filter(use %in% c("Allowed","Special Use") & use3 %in% input$use_name) %>%
filter(!is.na(use3)) %>%
data.frame() %>%
select(plan_name, use3, use, plan_type) %>%
distinct(plan_name, use3, use, plan_type) %>%
group_by(plan_name, plan_type, use3) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),
options=list(pageLength=8),
colnames = c("Area Name","Plan Type","Use Type","Allowed"))
}  else if(y()=="Parcels"){
datatable(st_join(st_buffer(parcel %>% filter(APN %in% input$parcel_name),0), st_buffer(gis1,0), largest=TRUE) %>%
left_join(uses_final1, by="id") %>%
data.frame() %>%
filter(use %in% c("Allowed", "Special Use")) %>%
distinct(APN,use3, plan_name.x, plan_type.x, use) %>%
group_by(APN,use3, plan_name.x, plan_type.x) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),options=list(pageLength=8),
colnames = c("APN","Use Type","Area Name","Area Type","Allowed"))
} else if (y() == "Planning Areas"){
datatable(uses_final1 %>%
filter(id_name %in% input$area_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
distinct(plan_name, area_type, use3, use ) %>%
group_by( plan_name,area_type,use3) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),
options=list(pageLength=8), colnames = c("Area Name","Area Type","Use Type", "Allowed"),
rownames=F)
} else {
datatable(uses_final1 %>% filter(use=="test") %>% select())
}
})
x<-reactive({
input$input_type
})
output$map <- renderLeaflet({
if(x() == "Regional"){
test<-gis1 %>% left_join(
uses_final1 %>%
filter(use3 %in% input$use_name & use %in% c("Allowed","Special Use")) %>%
distinct(id) %>%
mutate(tab="tab"), by="id") %>%
filter(!is.na(tab))
leaflet(test) %>%
addPolygons(weight=1, fillOpacity=0.5, fillColor="red", color="white", popup=paste0(test$id_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
#label = ~test$id_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addTiles()
}  else if (x() == "Parcels") {
parcel %>% filter(APN %in% input$parcel_name) %>%
leaflet() %>% addPolygons(weight=1, fillOpacity=0.3, fillColor="#229F03", color="white", popup=paste0(input$parcel_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
# # Add label info when mouseover
label = input$parcel_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
}else if (x() == "Planning Areas"){
gis1 %>% filter(id_name %in% input$area_name) %>% leaflet() %>%
addPolygons(weight=1, fillOpacity=0.5, fillColor="#03F", color="white", popup=paste0(input$area_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
# # Add label info when mouseover
label = input$area_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
} else {
leaflet() %>% addTiles()
}
})
output$ui <- renderUI(input$show,{
show_waiter(spin_fading_circles())
if (is.null(input$input_type)){
return(NULL)
} else {
switch(input$input_type,
"Planning Areas" = selectInput(selected=" ",inputId = "area_name",label="Select Planning Area:", multiple=T,  choices=sort(as.vector(c(unique(as.character(gis1$id_name))," ")))),
"Regional" = selectInput(selected=" ",inputId = "use_name",label="Select Zoning Use:", multiple=T,  choices=sort(as.vector(c(unique(uses_final1$use3)," ")))),
"Parcels" = selectInput(selected=" ",inputId = "parcel_name",label="Select Parcel:", multiple=T,  choices=sort(as.vector(c(unique(parcel$APN)," ")))))
}
hide_waiter()
})
}
)
shinyApp(
ui <- dashboardPage(skin="green",
dashboardHeader(title="TRPA Zoning Dashboard",titleWidth = 500),
dashboardSidebar(
selectInput(inputId = "input_type",label="Select Analysis Type", multiple=F,  choices=c("Planning Areas","Regional", "Parcels",""), selected=""),
uiOutput("ui"),
use_waiter(),
actionButton("show", "Show loading for 3 seconds"),
box(width=12,background="black",p("Select the dropdown options above to analyze TRPA zoning data at different scales; a user can analyze zoning data by planning areas, parcels, or region-wide. All zoning areas are included except shorezones."))
),
dashboardBody(
fluidRow(valueBoxOutput("uses1", width=4),
valueBoxOutput("uses2", width=2)),
fluidRow(
box(dataTableOutput("pas_table")),
box(leafletOutput("map")))
)
),
server <- function(input, output) {
w<-reactive({
input$input_type
})
output$uses1 <- renderValueBox({
if(w() == "Planning Areas"){
valueBox(
nrow(uses_final1 %>% filter(id_name %in% input$area_name) %>%
filter(use %in% c("Allowed"))), "# Allowed Uses",
color = "purple")
} else if (w() == "Parcels") {
valueBox(parcel %>%
filter(APN %in% input$parcel_name) %>%
data.frame() %>%
select(APN), "APN",color = "green")
} else if( w()== "Regional") {
valueBox(
uses_final1 %>%
filter(use3 %in% input$use_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
distinct(use3),
"Type of Use", color = "red")
} else if (w() == "") {
valueBox("","",color = "purple")
} else if (input$use_name=="") {
valueBox("","",color = "red")
}else if (input$use_name ==" ") {
valueBox("","",color = "red")
}  else {valueBox("","",color = "red")}
})
z<-reactive({
input$input_type
})
output$uses2 <- renderValueBox({
if(z() == "Planning Areas"){
valueBox(
nrow(uses_final1 %>% filter(id_name %in% input$area_name) %>%
filter(use %in% c("Special Use"))), "# Special Uses",
color = "purple")
}else if (z() == "Parcels") {
valueBox(nrow(st_join(st_buffer(parcel %>% filter(APN %in%input$parcel_name),0), st_buffer(gis1,0), largest=TRUE) %>%
left_join(uses_final1, by="id") %>%
data.frame() %>%
filter(use %in% c("Allowed", "Special Use")) %>%
distinct(APN,use3, plan_name.x, plan_type.x, use) %>%
group_by(APN,use3, plan_name.x, plan_type.x) %>%
summarise(`Use Type`=paste(use, collapse = " & "))),"Number of Uses Allowed",color = "green")
}else if (z() == "Regional") {
valueBox(
uses_final1 %>%
filter(use3 %in% input$use_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
summarise(number=n_distinct(plan_name)) %>% select(number),
"# of Planning Areas",
color = "red")
} else if (z() == "") {
valueBox("","",color = "purple")
} else if (input$use_name=="") {
valueBox("","",color = "red")
}else if (input$use_name==" ") {
valueBox("test","test",color = "red")
}else if (input$parcel_name==" ") {
valueBox("","",color = "green")
} else{valueBox("","",color = "red")
}
})
y<-reactive({
input$input_type
})
output$pas_table <- renderDataTable({
if(y() == "Regional"){
datatable(
uses_final1 %>%
filter(use %in% c("Allowed","Special Use") & use3 %in% input$use_name) %>%
filter(!is.na(use3)) %>%
data.frame() %>%
select(plan_name, use3, use, plan_type) %>%
distinct(plan_name, use3, use, plan_type) %>%
group_by(plan_name, plan_type, use3) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),
options=list(pageLength=8),
colnames = c("Area Name","Plan Type","Use Type","Allowed"))
}  else if(y()=="Parcels"){
datatable(st_join(st_buffer(parcel %>% filter(APN %in% input$parcel_name),0), st_buffer(gis1,0), largest=TRUE) %>%
left_join(uses_final1, by="id") %>%
data.frame() %>%
filter(use %in% c("Allowed", "Special Use")) %>%
distinct(APN,use3, plan_name.x, plan_type.x, use) %>%
group_by(APN,use3, plan_name.x, plan_type.x) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),options=list(pageLength=8),
colnames = c("APN","Use Type","Area Name","Area Type","Allowed"))
} else if (y() == "Planning Areas"){
datatable(uses_final1 %>%
filter(id_name %in% input$area_name) %>%
filter(use %in% c("Allowed","Special Use")) %>%
distinct(plan_name, area_type, use3, use ) %>%
group_by( plan_name,area_type,use3) %>%
summarise(`Use Type`=paste(use, collapse = " & ")),
options=list(pageLength=8), colnames = c("Area Name","Area Type","Use Type", "Allowed"),
rownames=F)
} else {
datatable(uses_final1 %>% filter(use=="test") %>% select())
}
})
x<-reactive(input$show,{
show_waiter(spin_fading_circles())
input$input_type
hide_waiter()
})
output$map <- renderLeaflet({
if(x() == "Regional"){
test<-gis1 %>% left_join(
uses_final1 %>%
filter(use3 %in% input$use_name & use %in% c("Allowed","Special Use")) %>%
distinct(id) %>%
mutate(tab="tab"), by="id") %>%
filter(!is.na(tab))
leaflet(test) %>%
addPolygons(weight=1, fillOpacity=0.5, fillColor="red", color="white", popup=paste0(test$id_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
#label = ~test$id_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addTiles()
}  else if (x() == "Parcels") {
parcel %>% filter(APN %in% input$parcel_name) %>%
leaflet() %>% addPolygons(weight=1, fillOpacity=0.3, fillColor="#229F03", color="white", popup=paste0(input$parcel_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
# # Add label info when mouseover
label = input$parcel_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
}else if (x() == "Planning Areas"){
gis1 %>% filter(id_name %in% input$area_name) %>% leaflet() %>%
addPolygons(weight=1, fillOpacity=0.5, fillColor="#03F", color="white", popup=paste0(input$area_name),
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "black",
fillColor = "00C6F0",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
# # Add label info when mouseover
label = input$area_name,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
} else {
leaflet() %>% addTiles()
}
})
output$ui <- renderUI({
if (is.null(input$input_type)){
return(NULL)
} else {
switch(input$input_type,
"Planning Areas" = selectInput(selected=" ",inputId = "area_name",label="Select Planning Area:", multiple=T,  choices=sort(as.vector(c(unique(as.character(gis1$id_name))," ")))),
"Regional" = selectInput(selected=" ",inputId = "use_name",label="Select Zoning Use:", multiple=T,  choices=sort(as.vector(c(unique(uses_final1$use3)," ")))),
"Parcels" = selectInput(selected=" ",inputId = "parcel_name",label="Select Parcel:", multiple=T,  choices=sort(as.vector(c(unique(parcel$APN)," ")))))
}
})
}
)
